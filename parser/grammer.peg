{
package parser

import (
    "fmt"

    "github.com/maniartech/uexl_go/ast"
)
}

/////////////////// Expressions //////////////////////

Input <- expr:Expr rest:PipedExpr* EOF {
  // Input
  return parseInput(string(c.text), expr, rest, c.pos.offset, c.pos.line, c.pos.col)
}

Expr <- _ first:Term rest:( _ LogOp _ Term )* _ {
  // Expr:
  return parseExpression(string(c.text), first, rest, c.pos.offset, c.pos.line, c.pos.col)
}

Term <- first:Shift rest:( _ CmpOp _ Shift )* {
  // Term:
  return parseExpression(string(c.text), first, rest, c.pos.offset, c.pos.line, c.pos.col)
}

Bit <- first:Shift rest:( _ BitOp _ Shift )* {
  // fmt.Println("Bit:", first, rest)
  return parseExpression(string(c.text), first, rest, c.pos.offset, c.pos.line, c.pos.col)
}

Shift <- first:Sum rest: ( _ ShiftOp _ Sum )* {
  // fmt.Println("Shift:", first, rest)
  return parseExpression(string(c.text), first, rest, c.pos.offset, c.pos.line, c.pos.col)
}

Sum <- first:Mul rest:( _ AddOp _ Mul )* {
  // fmt.Println("Sum:", first, rest)
  return parseExpression(string(c.text), first, rest, c.pos.offset, c.pos.line, c.pos.col)
}

Mul <- first:Mod rest:( _ MulOp _ Mod )* {
  // fmt.Println("Mul:", first, rest)
  return parseExpression(string(c.text), first, rest, c.pos.offset, c.pos.line, c.pos.col)
}

Mod <- first:Factor rest:( _ ModOp _ Factor )* {
  // fmt.Println("Mod:", first, rest)
  return parseExpression(string(c.text), first, rest, c.pos.offset, c.pos.line, c.pos.col)
}

Factor <- '(' expr:Expr ')' {
  return expr, nil
} / value:Value {
  return value, nil
}

/////////////////////// Piped Expressions ////////////////////////

PipedExpr <- "|" pipeType:PipeType? ":" expr:Expr {
  return parsePipe(pipeType, expr), nil
}

PipeType <- [a-z]+ {
  return string(c.text), nil
}

//////////////// Operators Definitions //////////////////////

AddOp <- ( '+' / '-' ) {
  return string(c.text), nil
}

MulOp <- ( '*' / '/' ) {
  return string(c.text), nil
}

ModOp <- ( "//" ) {
  return string(c.text), nil
}

CmpOp <- ( "==" / "!=" / "<=" / ">=" / '<' / '>' ) {
  return string(c.text), nil
}

LogOp <- ( "&&" / "||" ) {
  return string(c.text), nil
}

ShiftOp <- ( "<<" / ">>") {
  return string(c.text), nil
}

///////////////////// Values /////////////////////

Value <- val:( Number / Bool / Null / String / Array / Object / Identifier ) {
    return val, nil
}

///////////////////// Number /////////////////////

Number <- Integer ( '.' DecimalDigit+ )? Exponent? {
  return ast.NewNumberNode(
    string(c.text), c.pos.offset, c.pos.line, c.pos.col,
  )
}

Integer <- [+-]? DecimalDigit+ {
  return strconv.Atoi(string(c.text))
}

Exponent <- 'e'i [+-]? DecimalDigit+

DecimalDigit <- [0-9]

HexDigit <- [0-9a-f]i

///////////////////// Boolean /////////////////////

Bool <- ( "true" / "false") {
  return ast.NewBooleanNode(string(c.text), c.pos.offset, c.pos.line, c.pos.col)
}

///////////////////// Null /////////////////////

Null <- ( "null" ) {
  return ast.NewNullNode(string(c.text), c.pos.offset, c.pos.line, c.pos.col), nil
}

///////////////////// String /////////////////////

String <- DoubleQuoteString / SingleQuoteString

DoubleQuoteString <- '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
    value, _ := strconv.Unquote(string(c.text))
    return ast.NewStringNode(value, c.pos.offset, c.pos.line, c.pos.col), nil
}

SingleQuoteString <- "'" str:PlainString "'" {
    return ast.NewStringNode(string(c.text), c.pos.offset, c.pos.line, c.pos.col), nil
}

PlainString <- ( !EscapedChar . / '\\' EscapeSequence )* {
    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
    return string(c.text), nil
}

EscapedChar <- [\x00-\x1f"'\\]

EscapeSequence <- SingleCharEscape / UnicodeEscape

SingleCharEscape <- ["\\/bfnrt]

UnicodeEscape <- 'u' HexDigit HexDigit HexDigit HexDigit

////////////////////// Array //////////////////////

Array <- '[' _ vals:( Expr ( ',' _ Expr )* )? ']' {
    return parseArray(vals, c.text, c.pos.offset, c.pos.line, c.pos.col)
}

Object <- '{' _ vals:( String _ ':' _ Expr ( ',' _ String _ ':' _ Expr )* )? '}' {
    return parseObject(vals, c.text, c.pos.offset, c.pos.line, c.pos.col)
}

////////////////////// Identifier //////////////////////

Identifier <- IdSet ('.'  IdSet)* {
  return ast.NewIdentifierNode(string(c.text), c.pos.offset, c.pos.line, c.pos.col)
}

IdSet <- [a-zA-Z0-9$_@]+

////////////////////// Whitespace //////////////////////

_ "whitespace" <- [ \n\t\r]*

////////////////////// EOF //////////////////////

EOF <- !.

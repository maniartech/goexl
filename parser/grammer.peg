{
package parser

import (
    "github.com/maniartech/uexl_go/ast"
)
}

Input <- expr:Expr EOF {
    cntCodeBlocks++
    return expr, nil
}

Expr <- _ first:Term rest:( _ LogOp _ Term )* _ {
    cntCodeBlocks++
    return eval(first, rest), nil
}

Term <- first:Bit rest:( _ CmpOp _ Bit )* {
    cntCodeBlocks++
    return eval(first, rest), nil
}

Bit <- first:Shift rest:( _ BitOp _ Shift )* {
    cntCodeBlocks++
    return eval(first, rest), nil
}

Shift <- first:Sum rest: ( _ ShiftOp _ Sum )* {
    cntCodeBlocks++
    return eval(first, rest), nil
}

Sum <- first:Mul rest:( _ AddOp _ Mul )* {
    cntCodeBlocks++
    return eval(first, rest), nil
}

Mul <- first:Mod rest:( _ MulOp _ Mod )* {
    cntCodeBlocks++
    return eval(first, rest), nil
}

Mod <- first:Factor rest:( _ ModOp _ Factor )* {
    cntCodeBlocks++
    return eval(first, rest), nil
}

Factor <- '(' expr:Expr ')' {
    cntCodeBlocks++
    return expr, nil
} / integer:Integer {
    cntCodeBlocks++
    return integer, nil
}

AddOp <- ( '+' / '-' ) {
    cntCodeBlocks++
    return string(c.text), nil
}

MulOp <- ( '*' / '/' ) {
    cntCodeBlocks++
    return string(c.text), nil
}

ModOp <- ( "//" ) {
    cntCodeBlocks++
    return string(c.text), nil
}

CmpOp <- ( "==" / "!=" / "<=" / ">=" / '<' / '>' ) {
    cntCodeBlocks++
    return string(c.text), nil
}

BitOp <- ( '&' / '|' / '^' ) {
    cntCodeBlocks++
    return string(c.text), nil
}

LogOp <- ( "&&" / "||" ) {
    cntCodeBlocks++
    return string(c.text), nil
}

ShiftOp <- ( "<<" / ">>") {
    cntCodeBlocks++
    return string(c.text), nil
}

///////////////////// Number /////////////////////

Number <- Integer ( '.' DecimalDigit+ )? Exponent? {
  // Numbers have the same syntax as Go, and are parseable using
	// strconv.ParseFloat
	value, err := strconv.ParseFloat(string(c.text), 64)
	if err != nil {
		return nil, err
	}

	node := ast.NewNumberNode(ast.Number(value), c.pos.offset, c.pos.line, c.pos.col)
	return node, nil
}

Integer <- [+-]? DecimalDigit+ {
    return strconv.Atoi(string(c.text))
}

Exponent <- 'e'i [+-]? DecimalDigit+

DecimalDigit <- [0-9]

_ "whitespace" <- [ \n\t\r]*

EOF <- !.
